{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react-formulario\\\\src\\\\components\\\\AdicionaCliente.jsx\";\nimport React from 'react';\nimport { Formik, Field, useField } from 'formik';\n\nconst Campo = props => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, field, props, {\n    className: meta.error && meta.touched ? 'is-invalid' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  })));\n};\n\nconst AdicionaCliente = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Cadastro de Clientes\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      nome: '',\n      email: '',\n      nascimento: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.nome) {\n        errors.nome = 'O nome é obrigatório';\n      }\n\n      if (!values.email) {\n        errors.email = 'O email é obrigatório';\n      } else if (!/^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+\\.([a-z]+)?$/i.teste(values.email)) {\n        errors.email = 'O email é invalido';\n      }\n\n      if (!values.nascimento) {\n        errors.nascimento = 'A data de nascimento é obrigatória';\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, props => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"nome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, \"Nome\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"nome\",\n    name: \"nome\",\n    type: \"text\",\n    className: props.errors.nome && props.touched.nome ? 'is-invalid' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }), props.errors.nome && props.touched.nome ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 59\n    }\n  }, props.errors.nome) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    className: props.errors.email && props.touched.email ? 'is-invalid' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }), props.errors.email && props.touched.email ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 60\n    }\n  }, props.errors.email) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"nascimento\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, \"Data de Nascimento\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"nascimento\",\n    name: \"nascimento\",\n    type: \"date\",\n    className: props.errors.nascimento && props.touched.nascimento ? 'is-invalid' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }), props.errors.nascimento && props.touched.nascimento ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 70\n    }\n  }, props.errors.nascimento) : null), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"Adicionar\"))));\n};\n\nexport default AdicionaCliente;","map":{"version":3,"sources":["C:/workspace/react-formulario/src/components/AdicionaCliente.jsx"],"names":["React","Formik","Field","useField","Campo","props","field","meta","error","touched","AdicionaCliente","nome","email","nascimento","values","errors","teste","alert","JSON","stringify","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik , Field, useField } from 'formik';\n\nconst Campo = props => {\n  const [field, meta] = useField(props);\n  return (\n   <>\n    <input \n      {...field}\n      {...props}\n      className={meta.error && meta.touched ? 'is-invalid' : ''}\n    />\n   </> \n  )\n}\n\nconst AdicionaCliente = () => {\n  return (\n    <>\n      <h1>Cadastro de Clientes</h1>\n      <Formik \n      initialValues={{nome: '',email: '', nascimento:''}} \n      validate={(values)=> {\n        const errors ={};\n        if(!values.nome) {\n          errors.nome = 'O nome é obrigatório'\n        }\n        if(!values.email) {\n          errors.email = 'O email é obrigatório'\n        }else if (!/^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+\\.([a-z]+)?$/i.teste(values.email)) {\n          errors.email = 'O email é invalido'\n        }\n        if(!values.nascimento) {\n          errors.nascimento = 'A data de nascimento é obrigatória'\n        }\n        return errors;\n      }}\n      onSubmit={(values)=> {\n        alert(JSON.stringify(values));\n      }}>\n        {(props)=> (\n          <form onSubmit={props.handleSubmit} noValidate>\n            <div className=\"form-group\">\n              <label htmlFor=\"nome\">Nome</label>\n              <Field\n               id=\"nome\" \n               name=\"nome\" \n               type=\"text\" \n               className={props.errors.nome && props.touched.nome ? 'is-invalid' : ''}/>\n               {props.errors.nome && props.touched.nome ? <div className='invalid-feedback'>{props.errors.nome}</div> :null}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <Field \n              id=\"email\" \n              name=\"email\" \n              type=\"email\" \n              className={props.errors.email && props.touched.email ? 'is-invalid' : ''}/>\n              {props.errors.email && props.touched.email ? <div className='invalid-feedback'>{props.errors.email}</div> :null}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"nascimento\">Data de Nascimento</label>\n              <Field\n              id=\"nascimento\" \n              name=\"nascimento\" \n              type=\"date\" \n              className={props.errors.nascimento && props.touched.nascimento ? 'is-invalid' : ''}/>\n              {props.errors.nascimento && props.touched.nascimento ? <div className='invalid-feedback'>{props.errors.nascimento}</div> :null}\n            </div>\n            <button type=\"submit\">Adicionar</button>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default AdicionaCliente;\n"]},"metadata":{},"sourceType":"module"}