{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react-formulario\\\\src\\\\components\\\\AdicionaCliente.jsx\";\nimport React from 'react';\nimport { Formik, Field, useField } from 'formik';\nimport * as yup from 'yup';\n\nconst Campo = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, field, props, {\n    className: meta.error && meta.touched ? 'is-invalid' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  })), meta.error && meta.touched ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, meta.error) : null);\n};\n\nconst AdicionaCliente = () => {\n  const esquema = yup.object({\n    nome: yup.string().required('O nome é obrigatório').min(10, 'O nome deve ter no mínimo 10 caracteres').max(30, 'O nome deve ter no máximo 30 caracteres'),\n    email: yup.string().required('O email é obrigatório').email('O email é inválido'),\n    nascimento: yup.date().required('A data de nascimento é obrigatória').max(new Date(), 'Você não pode ter nascido no futuro...')\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Cadastro de Clientes\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      nome: '',\n      email: '',\n      nascimento: ''\n    },\n    validationSchema: esquema,\n    onSubmit: values => {\n      alert(JSON.stringify(values));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, props => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Campo, {\n    id: \"nome\",\n    name: \"nome\",\n    type: \"text\",\n    label: \"Nome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Campo, {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Campo, {\n    id: \"nascimento\",\n    name: \"nascimento\",\n    type: \"date\",\n    label: \"Data de Nascimento\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Adicionar\"))));\n};\n\nexport default AdicionaCliente;","map":{"version":3,"sources":["C:/workspace/react-formulario/src/components/AdicionaCliente.jsx"],"names":["React","Formik","Field","useField","yup","Campo","label","props","field","meta","id","error","touched","AdicionaCliente","esquema","object","nome","string","required","min","max","email","nascimento","date","Date","values","alert","JSON","stringify","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik , Field, useField } from 'formik';\nimport * as yup from 'yup'\n\nconst Campo = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={props.id}>{label}</label>\n        <input\n          {...field}\n          {...props}\n          className={meta.error && meta.touched ? 'is-invalid' : ''}\n        />\n        {meta.error && meta.touched ? (\n          <div className=\"invalid-feedback\">{meta.error}</div>\n        ) : null}\n      </div>\n    );\n}\n\nconst AdicionaCliente = () => {\n    const esquema = yup.object({\n      nome: yup\n        .string()\n        .required('O nome é obrigatório')\n        .min(10, 'O nome deve ter no mínimo 10 caracteres')\n        .max(30, 'O nome deve ter no máximo 30 caracteres'),\n      email: yup\n        .string()\n        .required('O email é obrigatório')\n        .email('O email é inválido'),\n      nascimento: yup\n        .date()\n        .required('A data de nascimento é obrigatória')\n        .max(new Date(), 'Você não pode ter nascido no futuro...'),\n    });\n  return (\n    <>\n      <h1>Cadastro de Clientes</h1>\n      <Formik \n      initialValues={{nome: '',email: '', nascimento:''}} \n      validationSchema={esquema}\n      onSubmit={(values)=> {\n        alert(JSON.stringify(values));\n      }}>\n        {(props)=> (\n          <form onSubmit={props.handleSubmit} noValidate>\n              <Campo\n               id=\"nome\" \n               name=\"nome\" \n               type=\"text\" \n               label=\"Nome\"/>\n              <Campo\n              id=\"email\" \n              name=\"email\" \n              type=\"email\" \n              label=\"Email\"/>\n              <Campo\n              id=\"nascimento\" \n              name=\"nascimento\" \n              type=\"date\" \n              label=\"Data de Nascimento\"/>\n            <button type=\"submit\">Adicionar</button>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default AdicionaCliente;\n"]},"metadata":{},"sourceType":"module"}