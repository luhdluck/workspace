{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react-formulario\\\\src\\\\components\\\\AdicionaCliente.jsx\";\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst AdicionaCliente = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, \"Cadastro de Clientes\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      nome: '',\n      email: '',\n      nascimento: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.nome) {\n        errors.nome = 'O nome é obrigatório';\n      }\n\n      if (!values.email) {\n        errors.email = 'O email é obrigatório';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.teste(values.email)) {\n        errors.email = 'O email é invalido';\n      }\n\n      if (!values.nascimento) {\n        errors.nascimento = 'A data de nascimento é obrigatória';\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, props => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: props.handleSubmit,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"nome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, \"Nome\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"nome\",\n    name: \"nome\",\n    value: props.values.nome,\n    type: \"text\",\n    onChange: props.handleChange,\n    onBlur: props.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }), props.errors.nome && props.touched.nome ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 59\n    }\n  }, props.errors.nome) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    name: \"email\",\n    value: props.values.email,\n    type: \"email\",\n    onChange: props.handleChange,\n    onBlur: props.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }), props.errors.email && props.touched.email ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 60\n    }\n  }, props.errors.email) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \"Data de Nascimento\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"nascimento\",\n    name: \"nascimento\",\n    value: props.values.nascimento,\n    type: \"date\",\n    onChange: props.handleChange,\n    onBlur: props.handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }), props.errors.nascimento && props.touched.nascimento ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 70\n    }\n  }, props.errors.nascimento) : null), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Adicionar\"))));\n};\n\nexport default AdicionaCliente;","map":{"version":3,"sources":["C:/workspace/react-formulario/src/components/AdicionaCliente.jsx"],"names":["React","Formik","AdicionaCliente","nome","email","nascimento","values","errors","teste","alert","JSON","stringify","props","handleSubmit","handleChange","handleBlur","touched"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\n\nconst AdicionaCliente = () => {\n  return (\n    <>\n      <h1>Cadastro de Clientes</h1>\n      <Formik \n      initialValues={{nome: '',email: '', nascimento:''}} \n      validate={(values)=> {\n        const errors ={};\n        if(!values.nome) {\n          errors.nome = 'O nome é obrigatório'\n        }\n        if(!values.email) {\n          errors.email = 'O email é obrigatório'\n        }else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.teste(values.email)) {\n          errors.email = 'O email é invalido'\n        }\n        if(!values.nascimento) {\n          errors.nascimento = 'A data de nascimento é obrigatória'\n        }\n        return errors;\n      }}\n      onSubmit={(values)=> {\n        alert(JSON.stringify(values));\n      }}>\n        {(props)=> (\n          <form onSubmit={props.handleSubmit} noValidate>\n            <div className=\"form-group\">\n              <label htmlFor=\"nome\">Nome</label>\n              <input\n               id=\"nome\" \n               name=\"nome\" \n               value={props.values.nome}\n               type=\"text\" \n               onChange={props.handleChange}\n               onBlur={props.handleBlur}/>\n               {props.errors.nome && props.touched.nome ? <div className='invalid-feedback'>{props.errors.nome}</div> :null}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input \n              id=\"email\" \n              name=\"email\" \n              value={props.values.email}\n              type=\"email\" \n              onChange={props.handleChange}\n              onBlur={props.handleBlur}/>\n              {props.errors.email && props.touched.email ? <div className='invalid-feedback'>{props.errors.email}</div> :null}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"date\">Data de Nascimento</label>\n              <input \n              id=\"nascimento\" \n              name=\"nascimento\" \n              value={props.values.nascimento}\n              type=\"date\" \n              onChange={props.handleChange}\n              onBlur={props.handleBlur}/>\n              {props.errors.nascimento && props.touched.nascimento ? <div className='invalid-feedback'>{props.errors.nascimento}</div> :null}\n            </div>\n            <button type=\"submit\">Adicionar</button>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default AdicionaCliente;\n"]},"metadata":{},"sourceType":"module"}